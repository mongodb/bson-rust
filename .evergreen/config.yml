########################################
# Evergreen Template for MongoDB Drivers
########################################

# When a task that used to pass starts to fail
# Go through all versions that may have been skipped to detect
# when the task started failing
stepback: true

# Mark a failure as a system/bootstrap failure (purple box) rather then a task
# failure by default.
# Actual testing tasks are marked with `type: test`
command_type: system

# Protect ourself against rogue test case, or curl gone wild, that runs forever
# 12 minutes is the longest we'll ever run
exec_timeout_secs: 3600 # 12 minutes is the longest we'll ever run

# What to do when evergreen hits the timeout (`post:` tasks are run automatically)
timeout:
  - command: shell.exec
    params:
      script: |
        ls -la

functions:
  "fetch source":
    # Executes git clone and applies the submitted patch, if any
    - command: git.get_project
      params:
        directory: "src"
    # Applies the subitted patch, if any
    # Deprecated. Should be removed. But still needed for certain agents (ZAP)
    - command: git.apply_patch
    # Make an evergreen exapanstion file with dynamic values
    - command: shell.exec
      params:
        working_dir: "src"
        script: |
           # Get the current unique version of this checkout
           if [ "${is_patch}" = "true" ]; then
              CURRENT_VERSION=$(git describe)-patch-${version_id}
           else
              CURRENT_VERSION=latest
           fi

           export PROJECT_DIRECTORY="$(pwd)"

           cat <<EOT > expansion.yml
           CURRENT_VERSION: "$CURRENT_VERSION"
           PROJECT_DIRECTORY: "$PROJECT_DIRECTORY"
           PREPARE_SHELL: |
              set -o errexit
              set -o xtrace
              export PROJECT_DIRECTORY="$PROJECT_DIRECTORY"

              export PROJECT="${project}"
           EOT
           # See what we've done
           cat expansion.yml

    # Load the expansion file to make an evergreen variable with the current unique version
    - command: expansions.update
      params:
        file: src/expansion.yml

  "install dependencies":
    command: shell.exec
    params:
      working_dir: "src"
      script: |
        ${PREPARE_SHELL}
        .evergreen/install-dependencies.sh

  "run tests":
    - command: shell.exec
      type: test
      params:
        shell: bash
        working_dir: "src"
        script: |
          ${PREPARE_SHELL}
          .evergreen/run-tests.sh

  "compile only":
    - command: shell.exec
      type: test
      params:
        shell: bash
        working_dir: "src"
        script: |
          ${PREPARE_SHELL}
          RUST_VERSION=${RUST_VERSION} .evergreen/compile-only.sh

  "check rustfmt":
    - command: shell.exec
      type: test
      params:
        shell: bash
        working_dir: "src"
        script: |
          ${PREPARE_SHELL}
          .evergreen/check-rustfmt.sh

  "check clippy":
    - command: shell.exec
      type: test
      params:
        shell: bash
        working_dir: "src"
        script: |
          ${PREPARE_SHELL}
          .evergreen/check-clippy.sh

  "run fuzzer":
    - command: shell.exec
      type: test
      params:
        shell: bash
        working_dir: "src"
        script: |
          ${PREPARE_SHELL}
          .evergreen/install-fuzzer.sh
          .evergreen/run-fuzzer.sh

  "check rustdoc":
    - command: shell.exec
      type: test
      params:
        shell: bash
        working_dir: "src"
        script: |
          ${PREPARE_SHELL}
          .evergreen/check-rustdoc.sh

  "init test-results":
    - command: shell.exec
      params:
        script: |
          ${PREPARE_SHELL}
          echo '{"results": [{ "status": "FAIL", "test_file": "Build", "log_raw": "No test-results.json found was created"  } ]}' > ${PROJECT_DIRECTORY}/test-results.json

  "cleanup":
    - command: shell.exec
      params:
        script: |
            # Nothing needs to be done here
pre:
  - func: "fetch source"
  - func: "install dependencies"

post:
  - func: "cleanup"

tasks:
  - name: "test"
    commands:
      - func: "run tests"

  - name: "compile-only"
    commands:
      - func: "compile only"

  - name: "check-rustfmt"
    commands:
      - func: "check rustfmt"

  - name: "check-clippy"
    commands:
      - func: "check clippy"

  - name: "check-rustdoc"
    commands:
      - func: "check rustdoc"

  - name: "run-fuzzer"
    commands:
      - func: "run fuzzer"

axes:
  - id: "extra-rust-versions"
    values:
      - id: "min"
        display_name: "1.48 (minimum supported version)"
        variables:
          RUST_VERSION: "1.48.0"
      - id: "nightly"
        display_name: "nightly"
        variables:
          RUST_VERSION: "nightly"

buildvariants:
-
  name: "tests"
  display_name: "Tests"
  run_on:
    - ubuntu1804-test
  tasks:
    - name: "test"

- matrix_name: "compile only"
  matrix_spec:
    extra-rust-versions: "*"
  display_name: "Compile on Rust ${extra-rust-versions}"
  run_on:
    - ubuntu1804-test
  tasks:
    - name: "compile-only"
-
  name: "lint"
  display_name: "Lint"
  run_on:
    - ubuntu1804-test
  tasks:
    - name: "check-clippy"
    - name: "check-rustfmt"
    - name: "check-rustdoc"

-
  name: "fuzz"
  display_name: "Raw BSON Fuzzer"
  run_on:
    - ubuntu1804-test
  tasks:
    - name: "run-fuzzer"
